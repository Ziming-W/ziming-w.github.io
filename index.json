[{"content":"\u003ch2 id=\"0---overview\"\u003e0 - Overview\u003c/h2\u003e\n\u003cp\u003eThis blog dicusses a production setup I made for a small-scale website on AWS. I mainly want to talk about the security configuration in the system and how the modules communicate with each other.\u003c/p\u003e\n\u003ch3 id=\"background\"\u003eBackground\u003c/h3\u003e\n\u003cp\u003eThis project was part of my coursework for COMP90082 (Software Project) at the University of Melbourne. Our team of five built a cleaner management and job allocation system for a real cleaning company (not a mock assignment). The project included a mobile app that enabled cleaners to view and submit jobs, as well as a web-based platform for administrators to manage assignments.\u003c/p\u003e\n\u003cp\u003eI was responsible for all deployment and AWS-related tasks within the team. At the end of the project, I handed over the system to the client by migrating all components from my AWS account to the client’s account.\u003c/p\u003e\n\u003ch3 id=\"why-it-is-a-production-setup\"\u003eWhy it is a production setup\u003c/h3\u003e\n\u003cp\u003eI implemented many improvements in the production setup compared to our simplified development setup, focusing on enhanced security and scalability. For example, in our dev deployment, HTTPS was not used in the system. I definitely can\u0026rsquo;t do the same for the production setup. Another example is that many services were publicly-facing in the dev setup to make our devlopment easier and it\u0026rsquo;s not a good practice.\u003c/p\u003e\n\u003ch3 id=\"-cost-constraints\"\u003e!!! Cost constraints\u003c/h3\u003e\n\u003cp\u003eThe client wants to keep costs as low as possible, so most of the setup I used are within the free tier. I couldn’t do something like placing the database in a private subnet and using a VPN to connect to it, as a VPN would be too costly.\u003c/p\u003e\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003ch2 id=\"1---overall-architecture\"\u003e1 - Overall architecture\u003c/h2\u003e\n\u003ch3 id=\"heading\"\u003e\u003c/h3\u003e\n\u003cp\u003eThis image shows the overall architecture of the system. Nothing fancy here—just a standard frontend-backend-database-objectstorage setup. So, I won’t dive into the deployment details of each component since they’re pretty straightforward. My main focus is on security and routing configurations.\u003c/p\u003e\n\u003cp\u003eHere is a brief overview:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCloudFront CDN: the only public endpoint\u003c/li\u003e\n\u003cli\u003eFrontend-Web: ReactJS on S3\u003c/li\u003e\n\u003cli\u003eFrontend-Mobile: React Native\u003c/li\u003e\n\u003cli\u003eBackend: Springboot on EC2\u003c/li\u003e\n\u003cli\u003eDatabase: MySQL on RDS\u003c/li\u003e\n\u003cli\u003eObject Storage: S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"/aws-architecture-sm.png\" alt=\"AWS Architecture\" title=\"AWS Architecture\"\u003e\u003c/p\u003e\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003ch2 id=\"2---cloudfront-cdn\"\u003e2 - CloudFront CDN\u003c/h2\u003e\n\u003ch3 id=\"purpose\"\u003ePurpose\u003c/h3\u003e\n\u003cp\u003eThis is definitely the coolest service on AWS. It basically fulfilles all my extra need for a production setup compare to a dev setup. It provides:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eHTTPS\u003c/strong\u003e: Provides HTTPS endpoints for all modules, a must-have feature. And I don\u0026rsquo;t need to worry about SSL certificates.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRouting\u003c/strong\u003e: Groups all modules under the same domain. I don\u0026rsquo;t have a domain so can’t use Route 53 for routing. CloudFront is the substitute.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEndpoint\u003c/strong\u003e: Serves as the only public endpoint in the system, keeping all other modules hidden behind it.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCaching/Performance\u003c/strong\u003e: Finally, the orignal purpose of a CDN.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"how-it-route-traffic\"\u003eHow it route traffic\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e/api\u003c/strong\u003e: It routes traffic to my EC2\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCache policy: \u003ccode\u003eCachingDisabled\u003c/code\u003e (dynamic API should not be cached in my use case)\u003c/li\u003e\n\u003cli\u003eOrigin request policy: \u003ccode\u003eAllViewer\u003c/code\u003e (some of my API requests contain query string. By default, CloudFront doesn\u0026rsquo;t forward query string to the origin, so I need to set this policy. I don\u0026rsquo;t want CloudFront to remove anything in http requests sent to my API endpoint)\u003c/li\u003e\n\u003cli\u003eOrigin access policy: not applicable since it\u0026rsquo;s a public endpoint. I will protect this resource through security group inbound rules. (see EC2 section for details)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e/files\u003c/strong\u003e: It routes traffic to my object storage s3 bucket\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCache policy: \u003ccode\u003eCachingOptimized\u003c/code\u003e (it should be cached)\u003c/li\u003e\n\u003cli\u003eOrigin request policy: \u003ccode\u003eDefault\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eOrigin access policy: enabled (see the object storage section for s3 bucket policy)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e/\u003c/strong\u003e: It routes traffic to my frontend s3 bucket\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ecache policy: \u003ccode\u003eCachingOptimized\u003c/code\u003e (it should be cached)\u003c/li\u003e\n\u003cli\u003eOrigin request policy: \u003ccode\u003eDefault\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eOrigin access policy: not applicable since I am using s3 static website endpoint. (see the frontend section for details)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003ch2 id=\"3---backend-server-in-ec2\"\u003e3 - Backend Server in EC2\u003c/h2\u003e\n\u003ch3 id=\"overview\"\u003eOverview\u003c/h3\u003e\n\u003cp\u003eI have a springboot server in EC2 running on port 8080. This port should only be accessible by CloudFront to ensure security.\u003c/p\u003e\n\u003cp\u003eIt also needs to connect to RDS. This setting is to be configured on RDS side.\u003c/p\u003e\n\u003cp\u003eIn addition, the backend server will upload files to the object storage s3 bucket. So, it needs the IAM access to the s3 bucket.\u003c/p\u003e\n\u003ch3 id=\"security-group---inbound-rules\"\u003eSecurity Group - Inbound Rules\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eTCP - 8080 - \u003ccode\u003ecom.amazonaws.global.cloudfront.origin-facing\u003c/code\u003e (this is a special AWS-managed prefix list that contains all CloudFront edge locations\u0026rsquo; IPs and allows their inbound traffic. check \u003ca href=\"https://aws.amazon.com/blogs/networking-and-content-delivery/limit-access-to-your-origins-using-the-aws-managed-prefix-list-for-amazon-cloudfront/\"\u003e[this guide]\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003eTCP - 22 - My own IP (for SSH access)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"iam\"\u003eIAM\u003c/h3\u003e\n\u003cp\u003eIAM role for EC2 to access S3 bucket.\u003c/p\u003e\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003ch2 id=\"4---database-in-rds\"\u003e4 - Database in RDS\u003c/h2\u003e\n\u003ch3 id=\"overview-1\"\u003eOverview\u003c/h3\u003e\n\u003cp\u003eThe database should only be accessible by the backend server in EC2 and my own IP address\u003c/p\u003e\n\u003ch3 id=\"security-group---inbound-rules-1\"\u003eSecurity Group - Inbound Rules\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eTCP - 3306 - Reference to EC2\u0026rsquo;s security group, to make sure EC2 can access RDS (this is a great feature provided by AWS as I don\u0026rsquo;t need to hard-code EC2\u0026rsquo;s IP address)\u003c/li\u003e\n\u003cli\u003eTCP - 3306 - My own IP\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003ch2 id=\"5---object-storage-in-s3\"\u003e5 - Object Storage in S3\u003c/h2\u003e\n\u003ch3 id=\"overview-2\"\u003eOverview\u003c/h3\u003e\n\u003cp\u003eThe object storage\u0026rsquo;s REST API should only be accessible by CloudFront. No traffic should go directly to this S3 bucket.\u003c/p\u003e\n\u003ch3 id=\"configuration\"\u003eConfiguration\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eBlock all public access: \u003ccode\u003eenabled\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eBucket policy that allows CloudFront access\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;Version\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2008-10-17\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;Id\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;PolicyForCloudFrontPrivateContent\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;Statement\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;Sid\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;AllowCloudFrontServicePrincipal\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;Effect\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Allow\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;Principal\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#f92672\"\u003e\u0026#34;Service\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cloudfront.amazonaws.com\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;Action\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;s3:GetObject\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;Resource\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;arn:aws:s3:::\u0026lt;bucket name\u0026gt;/*\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;Condition\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#f92672\"\u003e\u0026#34;StringEquals\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;AWS:SourceArn\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026lt;CloudFront distro ARN\u0026gt;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"6---frontend-in-s3\"\u003e6 - Frontend in S3\u003c/h2\u003e\n\u003ch3 id=\"overview-3\"\u003eOverview\u003c/h3\u003e\n\u003cp\u003eSimilar to object storage\u0026rsquo;s S3, for frontend\u0026rsquo;s S3, the best approach is also to use S3 as origin and let CloudFront handle all the traffic.\u003c/p\u003e\n\u003cp\u003eTwo popular setups are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDo exact the same as what I did for object storage. Make s3 bucket private and only allow CloudFront access through Origin Access Control and bucket policy. In this case, the origin in CloudFront would point to s3 \u003ccode\u003eREST API Endpoint\u003c/code\u003e. e.g. \u003ccode\u003ehttps://\u0026lt;bucket-name\u0026gt;.s3.\u0026lt;region\u0026gt;.amazonaws.com/\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eMake S3 bucket public and enable static website hosting. In this case, we allow CloudFront\u0026rsquo;s sole access through Referer header. The idea is that we let cloudfront add a custom header with a secret value when it forwards the request to S3. Then S3 checks the header and only allows the request if the header is correct. In this case, although S3 is public, only CloudFront can access it still. Another key difference between this option and the first option is that the CloudFront would point to s3\u0026rsquo;s \u003ccode\u003eStatic Website Endpoint\u003c/code\u003e instead of \u003ccode\u003eREST API Endpoint\u003c/code\u003e. The \u003ccode\u003eStatic Website Endpoint\u003c/code\u003e is something like \u003ccode\u003ehttp://\u0026lt;bucket-name\u0026gt;.s3-website.\u0026lt;region\u0026gt;.amazonaws.com\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRead more about all possible options \u003ca href=\"https://repost.aws/knowledge-center/cloudfront-serve-static-website\"\u003e[here]\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAmong these two, based on my research and previous experience, the first option is definitely more popular, secure and recommended. I only came across one article that suggested doing the second, but the author\u0026rsquo;s explanation is pretty vague. The article supporting the second option can be found \u003ca href=\"https://xebia.com/blog/best-practices-for-s3-web-hosting-and-explaining-why/\"\u003e[here]\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"what-i-did\"\u003eWhat I did\u003c/h3\u003e\n\u003cp\u003eAlthough the first method would be the best, what I did is a downgrade version of the second method - I made the S3 bucket public, enabled static website hosting and let CloudFront access this public endpoint. I didn\u0026rsquo;t set up the Referer header check so the S3 website endpoint is publicly accessible as well.\u003c/p\u003e\n\u003cp\u003eI chose this approach because the website isn\u0026rsquo;t fully developed, and the AWS setup might still change. Having a direct-access S3 endpoint as a backup is beneficial for future testing purpose. Plus, there doesn\u0026rsquo;t seem to be any major security concern with this setup. Even if a mal user finds the S3 endpoint, there isn\u0026rsquo;t much they can do. I feel like EC2 and RDS are more critical targets if misconfigured.\u003c/p\u003e\n\u003ch2 id=\"7---conclusion\"\u003e7 - Conclusion\u003c/h2\u003e\n\u003ch3 id=\"summary-of-the-setup\"\u003eSummary of the setup\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCloudFront is the only legit public endpoint in the system. It routes traffic to all other modules.\u003c/li\u003e\n\u003cli\u003eEC2: only accessible by CloudFront and my own IP. It is hidden.\u003c/li\u003e\n\u003cli\u003eRDS: only accessible by EC2 and my own IP. It is hidden.\u003c/li\u003e\n\u003cli\u003eObject Storage S3: only accessible by CloudFront. It is hidden.\u003c/li\u003e\n\u003cli\u003eFrontend S3: theroetically it should be hidden, but I made it public for now as a backup endpoint. All normal requests still go through CloudFront.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThank you for reading 😊.\u003c/p\u003e\n","description":null,"image":"/aws.png","permalink":"/blogs/small-website-prod-aws-setup/","title":"A Production Setup for a Small-Scale Website on AWS"},{"content":"\u003chr\u003e\n\u003cul\u003e\n\u003cli\u003eThis was part of my project work for COMP90020 (Distributed Algorithms) at the University of Melbourne.\u003c/li\u003e\n\u003cli\u003eDue to limitations of my static site generator, the bibliography format in this blog is pretty weird and not aligned to a formal reference style.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"0---abstract\"\u003e0 - Abstract\u003c/h2\u003e\n\u003cp\u003eDistributed consensus is one of the foundations of fault-tolerant\ndistributed systems. This paper firstly provides an overview of the\ntheory foundations of distributed consensus, including the Byzantine\nGenerals problem and the FLP impossibility result. It then discusses\nthe Raft algorithm in depth, including its approach to leader election\nand log replication, and proposed enhancements to address limitations.\nThis paper also conducts a comparative analysis of Paxos and Raft,\nfocusing on their understandability, fault-tolerance and performance.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eKeywords\u003c/strong\u003e: Distributed Consensus, State Machine Replication, Paxos,\nRaft\u003c/p\u003e\n\u003ch2 id=\"1---consensus\"\u003e1 - Consensus\u003c/h2\u003e\n\u003cp\u003eConsensus is a fundamental problem in distributed systems. It refers to\nthe process that members within a group collaboratively agree on some\ncommon decisions. Fault-tolerance is a critical factor in distributed\nsystems, and consensus algorithms are expected to survive failures to\nsome extent to achieve availability \u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e.\u003c/p\u003e\n\u003cp\u003eThe paper by Pease et al. \u003csup id=\"fnref:2\"\u003e\u003ca href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e2\u003c/a\u003e\u003c/sup\u003e published in 1980 is\none of the pioneering works of consensus algorithms. It describes and\nformally proves the problem of interactive consistency - all correct\nprocesses can agree on a common vector despite the failures of some\nprocesses, as long as the total number of processes is more than three\ntimes of the number of the failure processes. Another foundation is the\npaper by Lamport et al. \u003csup id=\"fnref:3\"\u003e\u003ca href=\"#fn:3\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e3\u003c/a\u003e\u003c/sup\u003e in 1982, where the\nByzantine Generals Problem is proposed. The original problem and its\nvariations have greatly influenced the future directions of research in\nconsensus and fault-tolerant distributed systems.\u003c/p\u003e\n\u003cp\u003eConsensus algorithms and many relevant problems aim to satisfy three\nimportant properties \u003csup id=\"fnref:4\"\u003e\u003ca href=\"#fn:4\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e4\u003c/a\u003e\u003c/sup\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTermination: The algorithm should terminate eventually and all\ncorrect processes should have their agreement variable set in the\nend.\u003c/li\u003e\n\u003cli\u003eAgreement: All correct processes agree on the same values.\u003c/li\u003e\n\u003cli\u003eIntegrity (the definition could vary): If all correct processes\nstart with proposing the same value v, then eventually they should\nall agree on v.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"11---the-byzantine-problem-family\"\u003e1.1 - The Byzantine Problem Family\u003c/h3\u003e\n\u003cp\u003eThe Byzantine Generals problem proposed by Lamport et al.\n\u003csup id=\"fnref1:3\"\u003e\u003ca href=\"#fn:3\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e3\u003c/a\u003e\u003c/sup\u003e in 1982 is one of the foundations of distributed\nconsensus. It highlights the challenges of reaching consensus when there\nare processes exhibiting arbitrary behaviours. The original problem and\nits variations have been studied extensively and served as the\nfoundations of many failure models and consensus algorithms.\u003c/p\u003e\n\u003cp\u003eThe original paper \u003csup id=\"fnref2:3\"\u003e\u003ca href=\"#fn:3\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e3\u003c/a\u003e\u003c/sup\u003e describes a scenario that a\ngroup of generals must reach a consensus decision to attack or retreat\nfrom a city. They can only communicate through messengers, and some of\nthe generals may be traitors and thus sending false information to their\npeers to disrupt the decision-making process. The goal is to find an\nalgorithm to ensure the loyal generals will reach a correct and integral\ndecision despite the disruption of false information. The authors have\nproved that with unauthenticated message passing (i.e. oral messages\nthrough messenger), consensus can be achieved if and only if the number\nof traitors is less than one-third of the total number of generals.\nHowever, if authentication is applied (i.e. unforgeable messages), the\nproblem is solvable regardless the number of traitors. The Byzantine\nGenerals problem\u0026rsquo;s thought process can be easily applied to the\ndistributed computing settings, where the usual way of communication is\nthrough a channel, and the presence of faulty processes that exhibit\narbitrary behaviours can lead to destructive damages. While a process\ncan utilize authentication approaches such as digital signatures to\nverify the integrity of the messages.\u003c/p\u003e\n\u003ch4 id=\"111---variations-of-the-byzantine-generals-problem\"\u003e1.1.1 - Variations of the Byzantine Generals Problem\u003c/h4\u003e\n\u003cp\u003eThe Byzantine Generals problem has many variations. The Byzantine\nGenerals/Broadcast and Byzantine Agreement/Consensus are two closely\nrelated types of Byzantine problems \u003csup id=\"fnref:5\"\u003e\u003ca href=\"#fn:5\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e5\u003c/a\u003e\u003c/sup\u003e.\nThe original paper \u003csup id=\"fnref3:3\"\u003e\u003ca href=\"#fn:3\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e3\u003c/a\u003e\u003c/sup\u003e by Lamport et al. mostly\ndiscussed a broadcast-based problem - there is a commander that will\nbroadcast a message to all nodes. Hence, the integrity definition here\nfocus on all correct nodes agreeing on the value of the commander if the\ncommander is correct. While in the Byzantine agreement/consensus\nproblem, there is no special commander, so the integrity holds if and\nonly if all correct nodes start with a value and end with the same\nvalue.\u003c/p\u003e\n\u003cp\u003eIn addition, the 1983 paper \u003csup id=\"fnref:6\"\u003e\u003ca href=\"#fn:6\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e6\u003c/a\u003e\u003c/sup\u003e by Lamport discussed the Weak\nByzantine Generals Problem. In this variation, all correct processes are\nallowed to bypass integrity requirement and agree upon on a different\nvalue with the general\u0026rsquo;s initial value, when some processes fail. This\nproblem could be applied in the distributed transaction scenarios, where\nall the processes should abort if some of them fail, even if the initial\ncommand from the commander is to commit. The paper by Dolev el al. in\n1986 \u003csup id=\"fnref:7\"\u003e\u003ca href=\"#fn:7\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e7\u003c/a\u003e\u003c/sup\u003e introduced another variation - Byzantine\nGenerals with approximate agreement, where the processes start with\narbitrary real values and only need to agree on an approximate value.\nThe problem could be applied in practice to achieve agreements that\ndon\u0026rsquo;t require exact accuracy, such as synchronizing clocks or\ncalibrating sensors.\u003c/p\u003e\n\u003cp\u003eThere were many more variations developed to be applied to real-word\nscenarios, taking into account of different requirements, system\ninteraction models, and failure models.\u003c/p\u003e\n\u003ch3 id=\"12---the-flp-impossibility-and-system-synchrony\"\u003e1.2 - The FLP Impossibility and System Synchrony\u003c/h3\u003e\n\u003cp\u003eDistributed systems can be classified into two main types: synchronous\nsystems and asynchronous systems \u003csup id=\"fnref1:4\"\u003e\u003ca href=\"#fn:4\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e4\u003c/a\u003e\u003c/sup\u003e. In a synchronous\ndistributed system, there are bounds on process communication delay,\ndrift of processes\u0026rsquo; local clocks, and process execution time. While an\nasynchronous distributed system is the opposite and has no bounds on\nthese three values.\u003c/p\u003e\n\u003cp\u003eFischer et al. \u003csup id=\"fnref:8\"\u003e\u003ca href=\"#fn:8\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e8\u003c/a\u003e\u003c/sup\u003e presented an important theorem in 1985, known as\nthe FLP impossibility proof. The work proved that it is impossible to\nreach consensus in an asynchronous distributed system. The authors\ndemonstrated that even in reliable message channels and a non-Byzantine\nfailure asynchronous system, a single process\u0026rsquo;s unpredictable stopping\ncan cause any consensus algorithm to fail. Despite the fact that a\nperfect consensus algorithm doesn\u0026rsquo;t exist in asynchronous distributed\nsystems, the author argued that the conditions under which the FLP\nimpossibility result holds are quite strict and rarely encountered in\npractice. In most real-world distributed systems, there are certain\nassumptions that can be made regarding the system\u0026rsquo;s behaviour to refine\nthe interaction model. Therefore, researchers began to investigate\nweaker synchrony assumptions that would still allow for the development\nof fault-tolerant consensus algorithms \u003csup id=\"fnref:9\"\u003e\u003ca href=\"#fn:9\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e9\u003c/a\u003e\u003c/sup\u003e.\u003c/p\u003e\n\u003cp\u003eNotable researches include the 1987 paper by Dolev et al.\n\u003csup id=\"fnref:10\"\u003e\u003ca href=\"#fn:10\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e10\u003c/a\u003e\u003c/sup\u003e and the 1988 paper by Dwork et al.\n\u003csup id=\"fnref:11\"\u003e\u003ca href=\"#fn:11\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e11\u003c/a\u003e\u003c/sup\u003e. In \u003csup id=\"fnref1:10\"\u003e\u003ca href=\"#fn:10\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e10\u003c/a\u003e\u003c/sup\u003e, the authors\ninvestigated 5 critical parameters including process synchrony,\ncommunication synchrony, message ordering synchrony, transmission type\n(broadcast/point-to-point), and the atomicity of message send/receive,\nby analysing their impact on consensus fault tolerance. They proved that\nconsensus under failure is possible under several combinations of\nparameters. Building on the ideas from \u003csup id=\"fnref2:10\"\u003e\u003ca href=\"#fn:10\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e10\u003c/a\u003e\u003c/sup\u003e, another paper\n\u003csup id=\"fnref1:11\"\u003e\u003ca href=\"#fn:11\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e11\u003c/a\u003e\u003c/sup\u003e formally introduced the concept of partial\nsynchrony and reported the effect of varying degrees of partial\nsynchrony on the fault tolerance of consensus algorithms. Both of these\npapers have laid theoretical foundations for future consensus algorithms\nand refinements of weaker synchrony guarantees.\u003c/p\u003e\n\u003cp\u003eBesides, Chandra and Toueg \u003csup id=\"fnref:12\"\u003e\u003ca href=\"#fn:12\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e12\u003c/a\u003e\u003c/sup\u003e have proposed a\nframework that focuses on discovering the usage of failure detectors to\naugment consensus under weaker synchrony assumptions. Building upon the\nworks of \u003csup id=\"fnref3:10\"\u003e\u003ca href=\"#fn:10\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e10\u003c/a\u003e\u003c/sup\u003e and \u003csup id=\"fnref2:11\"\u003e\u003ca href=\"#fn:11\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e11\u003c/a\u003e\u003c/sup\u003e, they\ninvestigated the roles of failure detectors when incorporating partial\nsynchrony assumptions into the asynchronous model. By defining eight\nclasses of failure detectors of different completeness and accuracy\nproperties, the authors reported that consensus can be solved in weak\nsynchronous systems using certain capable failure detectors.\u003c/p\u003e\n\u003cp\u003eFor a more practical example, the paper by Castro and Liskov\n\u003csup id=\"fnref:13\"\u003e\u003ca href=\"#fn:13\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e13\u003c/a\u003e\u003c/sup\u003e in 1999 introduces a state machine replication\nalgorithm know as pBFT for achieving the Byzantine fault tolerance\n(BFT). The authors indicated that previous algorithms suffered from the\nsynchronous distributed system assumption, which might be vulnerable to\nvarious external attacks such as denial-of-service in the real-world.\nInstead, the authors circumvented the FLP impossibility theorem by\nmaking several weak synchrony assumptions. For example, the algorithm\nassumed that the message transmission delay won\u0026rsquo;t grow indefinitely, so\nthat the liveness of the system can be guaranteed and clients eventually\nreceive responses to their requests.\u003c/p\u003e\n\u003ch2 id=\"2---state-machine-replication-and-paxos\"\u003e2 - State Machine Replication and Paxos\u003c/h2\u003e\n\u003ch3 id=\"21---state-machine-replication\"\u003e2.1 - State Machine Replication\u003c/h3\u003e\n\u003cp\u003eConsensus algorithms have many applications, one of which is building a\nstate machine replication. A state machine replication ensures that all\nnodes within a cluster maintain the same state and execute the same\nsequence of commands, thereby achieving replication. The earliest\nconcept of state machine replication was proposed by Lamport\n\u003csup id=\"fnref:14\"\u003e\u003ca href=\"#fn:14\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e14\u003c/a\u003e\u003c/sup\u003e in 1978. Since then, such algorithms have been\nwidely adopted in many domains to improve availability and\nfault-tolerance. For example, many databases provide a replication\ncluster, where the master node coordinates the replication process and\nensures that all replica nodes stay synchronized. In this setup, the\ncluster can handle high concurrent reads by using load balancers to\ndistribute incoming requests across multiple nodes. Furthermore, if the\nmaster node fails, one of the replica nodes can seamlessly take over as\nthe new master.\u003c/p\u003e\n\u003ch3 id=\"22---paxos\"\u003e2.2 - Paxos\u003c/h3\u003e\n\u003cp\u003eOne of the most renown state machine replication algorithm is the Paxos\nalgorithm, which was proposed by Lamport \u003csup id=\"fnref:15\"\u003e\u003ca href=\"#fn:15\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e15\u003c/a\u003e\u003c/sup\u003e in 1998. The Paxos\nfamily of algorithms have been extensively modified and have long been\nthe mainstream choice. Numerous revisions to the original Paxos have\nbeen proposed to address limitations and improve performance. One\nnotable revision is Multi-Paxos \u003csup id=\"fnref:16\"\u003e\u003ca href=\"#fn:16\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e16\u003c/a\u003e\u003c/sup\u003e which extends the\nbasic Paxos algorithm to allow for the agreement on a sequence of values\nrather than just a single one to reduce overhead. Another revision is\nFast Paxos \u003csup id=\"fnref:17\"\u003e\u003ca href=\"#fn:17\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e17\u003c/a\u003e\u003c/sup\u003e, which reduces the latency by allowing\nacceptors to accept values in a single round and without prepare phase.\u003c/p\u003e\n\u003ch2 id=\"3---raft-in-depth\"\u003e3 - Raft In-depth\u003c/h2\u003e\n\u003ch3 id=\"31---the-invention-of-raft\"\u003e3.1 - The Invention of Raft\u003c/h3\u003e\n\u003cp\u003eAlthough Paxos has been formally proved to be safe, an important issue\nwith Paxos is its non-triviality to understand \u003csup id=\"fnref:18\"\u003e\u003ca href=\"#fn:18\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e18\u003c/a\u003e\u003c/sup\u003e. There\nare many studies that have tried to simplify and explain Paxos in a more\nunderstandable format\n\u003csup id=\"fnref:19\"\u003e\u003ca href=\"#fn:19\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e19\u003c/a\u003e\u003c/sup\u003e \u003csup id=\"fnref:20\"\u003e\u003ca href=\"#fn:20\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e20\u003c/a\u003e\u003c/sup\u003e \u003csup id=\"fnref:21\"\u003e\u003ca href=\"#fn:21\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e21\u003c/a\u003e\u003c/sup\u003e. The\ninvention of Raft has opened another window in the field of consensus\nalgorithm. Raft \u003csup id=\"fnref:22\"\u003e\u003ca href=\"#fn:22\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e22\u003c/a\u003e\u003c/sup\u003e was invented by Ongaro and Ousterhout\nin 2014 to serve as an understandable alternative to Paxos and has\ngained significant popularity since.\u003c/p\u003e\n\u003ch3 id=\"32---how-raft-works\"\u003e3.2 - How Raft Works\u003c/h3\u003e\n\u003cp\u003eRaft breaks down the consensus problem into two sub-problems: leader\nelection and log replication. Leader election aims to elect a node as\nthe leader that is responsible for handling client requests,\ndistributing log entries to other nodes, and deciding when to commit a\nlog entry. Entries can only become persistent (saved in local storage)\nafter being committed. Log replication describes how the leader\nsupervises the process of distributing log entries and enforces\nconsistency within the cluster. Raft, in its essential, is a state\nmachine that every nodes transit between three states: Follower,\nCandidate, and Leader.\u003c/p\u003e\n\u003ch4 id=\"321---follower\"\u003e3.2.1 - Follower\u003c/h4\u003e\n\u003cp\u003eNodes will always start as followers. A follower has two tasks: listen\nto the leader\u0026rsquo;s coordination passively and start new elections to\nreplace the current leader once it is down. The follower accepts new\nentries by receiving leader\u0026rsquo;s AppendEntries RPC , which contains the\nlatest log entries (could be empty if there are no logs) and other\nrelevant indicators. The information is used by the follower to check if\nthere are new entries waiting for it to append, or its own entries are\nout of sync. The AppendEntries RPC also acts as a heartbeat, a followers\nwill reset its timer if it hears a valid heartbeat. It will transition\nto a candidate if it times out.\u003c/p\u003e\n\u003ch4 id=\"322---candidate\"\u003e3.2.2 - Candidate\u003c/h4\u003e\n\u003cp\u003eWhen a node times out, it will transition to the candidate state and\nsend out RequestVote RPC including assigned random timeout to every\nnode, the recipient can respond positively or negatively based on the\nfollowing criteria: the initiator\u0026rsquo;s term number (should be greater than\nthe current term); whether it has received a vote request from another\ncandidate; if the candidate\u0026rsquo;s log is up-to-date. A candidate will\npromote itself to leader, and send out AppendEntries RPC to every other\nnode to announce its leadership once it gathers positive responses from\nmajority nodes.\u003c/p\u003e\n\u003ch4 id=\"323---leader\"\u003e3.2.3 - Leader\u003c/h4\u003e\n\u003cp\u003eThe leader is responsible for handling client requests, if a non-leader\nnode receives a client request, the node will ask the client to talk to\nthe leader instead. The leader is also responsible for orchestrating the\nlog replication. When the leader receives a new client request, it will\nappend that entry to its log and distribute it to all the followers. If\nthe majority of nodes own an entry, the leader will commit and tell\nothers to commit up to this entry.\u003c/p\u003e\n\u003ch3 id=\"33---raft-revisions\"\u003e3.3 - Raft Revisions\u003c/h3\u003e\n\u003cp\u003eAlthough Raft is a sophisticated algorithm, its application is limited\nin environments where security and efficiency are considered crucial.\u003c/p\u003e\n\u003cp\u003eByzantine-fault-tolerance was not part of the consideration when\ndesigning Raft. In situations where mutual trust can not be assumed,\nadversarial or faulty nodes can compromise the entire Raft cluster\neither as followers or as leaders:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eProblem 1: In Raft\u0026rsquo;s algorithm, any node can initiate an election,\nand a malicious node can easily lead the whole cluster into\nstarvation by initiating new elections endlessly.\u003c/li\u003e\n\u003cli\u003eProblem 2: Only the leader can interact with clients. A Byzantine\nleader can forge client requests and deceive other nodes, or reply\nwith false information to client.\u003c/li\u003e\n\u003cli\u003eProblem 3: The current leader will be demoted to a follower by\nreceiving a RequestVote RPC with a higher term number. Without ways\nfor nodes to verify whether an election was initiated with valid\ncauses, malicious nodes can become leader by announcing incorrect\nterm numbers.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEfficiency is another potential improvement area. As the number of nodes\nincreases, the communication density and the chance of split vote will\nalso increase during the election stage. In the worst-case scenario, the\ncluster will never be led by any leader due to constant re-elections.\nThese problems may not seem serious with fewer nodes, but they will\nbottleneck the algorithm\u0026rsquo;s efficiency as the cluster scales up.\u003c/p\u003e\n\u003ch4 id=\"331---tangaroa-a-byzantine-fault-tolerant-raft\"\u003e3.3.1 - Tangaroa: a Byzantine Fault Tolerant Raft\u003c/h4\u003e\n\u003cp\u003eDesigned by Copeland and Zhong \u003csup id=\"fnref:23\"\u003e\u003ca href=\"#fn:23\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e23\u003c/a\u003e\u003c/sup\u003e, Tangaroa\naddresses Byzantine-fault-tolerance problems defined previously by\nleveraging digital signatures, unique identifiers, and hashing. A BFT\nRaft cluster that can tolerate \\(f\\) Byzantine nodes must have at least\n\\(3f+1\\) nodes, where each node owns the public key from client and every\nother node. The client also knows every node\u0026rsquo;s public key. Nodes and\nclients always sign their messages with their private keys during\ncommunication. The recipient will discard messages without a valid\nsignature. Specifically, Tangaroa prevents Byzantine Faults by improving\nRaft\u0026rsquo;s two sub-components: leader election and log replication.\u003c/p\u003e\n\u003cp\u003eA leader election\u0026rsquo;s initiation process is identical to the original Raft\nalgorithm, a follower starts an election, transitions to candidates, and\nsends out RequestVote RPCs. Modifications mainly focus on the recipient\nof the RequestVote RPCs. After receiving a vote request, the follower\nwill not terminate its current term immediately but will continue to\nlisten to heartbeats from the current leader and only respond to the\nvote request after the leader\u0026rsquo;s timeout. This is called Lazy Voting, and\nit prevents malicious nodes from starving the system by constantly\nstarting new elections. After the recipient confirms the leader\u0026rsquo;s\ntimeout, it will then respond to the vote request with its digital\nsignature appended. The digital signature is used by the newly elected\nleader (after receiving enough votes) to send out heartbeat messages\nwith the votes signed by all supporting peers to convince followers of\nits authority. If such a leader is then found to be behaving\nsuspiciously, the client can trigger a new election by broadcasting\nUpdateLeader RPCs to all nodes.\u003c/p\u003e\n\u003cp\u003eExtra steps are involved in log replication to prevent a malicious\nleader from forging client requests. The client sends requests with a\ndigital signature to guarantee authenticity and integrity, and a unique\nidentifier to prevent faulty nodes from duplicating existing entries.\nWhen the leader receives a request, it will send out signed heartbeats\nand all votes granted to it during the election phase, to convince\nfollowers of its authority. After receiving a heartbeat, the follower\nwill validate: (a) if a heartbeat is from a valid leader (verified by\nthe signed votes), and (b) if the new entry is valid (verified by the\nsigned request). Followers will only replicate entries that satisfy\nboth. A technique called incremental hashing is used to verify whether\nnew entries are valid, such hash value exists at every log entry and is\ncomputed with the hash value at the previous entry. To compute the\nincremental has at index \\(i\\), the node computes the incremental hash\nvalue at index \\(i-1\\) recursively. This means the recipient of a new\nentry can verify if the leader has any missing or faulty entries by\nsimply comparing the incremental hash values.\u003c/p\u003e\n\u003ch4 id=\"332---improving-rafts-efficiency\"\u003e3.3.2 - Improving Raft\u0026rsquo;s efficiency\u003c/h4\u003e\n\u003cp\u003eThere are a number of improvements to Raft\u0026rsquo;s efficiency, this section\nwill provide a high-level overview of how some designs tackle the\nproblem.\u003c/p\u003e\n\u003cp\u003eDesigned by Kim et al. \u003csup id=\"fnref:24\"\u003e\u003ca href=\"#fn:24\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e24\u003c/a\u003e\u003c/sup\u003e, a paper aims to address the network\nsplit problem (The election phase in Raft is also known as network split\nthat cluster is considered down during election) in private blockchains\nwhere the network condition is unstable, resulting in a significant\ndecrease in the blockchain\u0026rsquo;s throughput and performance. This paper\naddresses this problem by proposing an innovative method that uses\nfederated learning to improve the leader election mechanism that\nconsiders the network stability when electing leaders and minimizes the\nchance of network splits.\u003c/p\u003e\n\u003cp\u003eWang et al. \u003csup id=\"fnref:25\"\u003e\u003ca href=\"#fn:25\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e25\u003c/a\u003e\u003c/sup\u003e proposed a K-bucket-based Raft-like algorithm to\nmaximize the efficiency of the leader election and consensus process,\nwhich will be impacted as the number of nodes increases. The proposed\nalgorithm is called KRaft, integrated the Kademlia protocol and K-bucket\ninto the raft algorithm. Kademlia protocol uses a XOR metric to measure\nthe logical distance between any two nodes. K-bucket is a component of\nthe routing table computed by every node, which contains information\nabout every other nodes at varying distances.\u003c/p\u003e\n\u003cp\u003eLastly, Want et al. \u003csup id=\"fnref:26\"\u003e\u003ca href=\"#fn:26\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e26\u003c/a\u003e\u003c/sup\u003e proposed a Raft\nalgorithm designed specifically for highly adversarial and high\nreal-time environments, which takes both Byzantine-fault-tolerance and\nefficiency into account. The algorithm, hhRaft tackles security problems\nby introducing monitor nodes that supervise the election and the log\nreplication process, the monitor nodes also help reduce the possibility\nof network splits and election delays.\u003c/p\u003e\n\u003ch2 id=\"4---paxos-and-raft-a-comparative-analysis\"\u003e4 - Paxos and Raft: A Comparative Analysis\u003c/h2\u003e\n\u003cp\u003eIn this section, we will compare various aspects of Paxos and Raft. Both\nalgorithms have many revisions. We will mainly use Paxos\u0026rsquo; most popular\nimplementation - Multi-Paxos to compare with the original Raft. We\nfollowed a study \u003csup id=\"fnref:27\"\u003e\u003ca href=\"#fn:27\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e27\u003c/a\u003e\u003c/sup\u003e to obtain a specific version of\ndefinition.\u003c/p\u003e\n\u003ch3 id=\"41---leader-election-and-understandability\"\u003e4.1 - Leader Election and Understandability\u003c/h3\u003e\n\u003cp\u003eOne of the most significant understandability difference between Raft\nand the Paxos family is how the election is conducted\n\u003csup id=\"fnref1:27\"\u003e\u003ca href=\"#fn:27\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e27\u003c/a\u003e\u003c/sup\u003e. In a state machine replication algorithm, there\nmight be different nodes trying to compete to be the leader at the same\ntime. It is important to guarantee Election Safety - at most one\ncandidate can win the election during an election term. It is acceptable\nthat no candidate wins the election due to a split vote or other issues\nand the decision is pushed back to subsequent elections. However, the\noccurrence of such repetitive elections should be reduced as much as\npossible to minimize downtime.\u003c/p\u003e\n\u003cp\u003eIn Paxos, leader election is less trivial. To prevent a split vote, the\ncandidate with the highest term number will become the leader. A server\n\\(s\\) among a cluster with \\(n\\) nodes can only be a candidate in a term if\n\\(t\\mod n=s\\). Therefore, there can only be one candidate per term,\nensuring the election safety. However, Paxos doesn\u0026rsquo;t enforce that the\nnew leader will contain all the up-to-date logs once it starts the\nelection. Instead, each node will include their log entries in their\nreply to the election messages, allowing the new leader to update its\nlog on-the-fly.\u003c/p\u003e\n\u003cp\u003eIn Raft, leader election is handled in a more understandable way. It\nuses a majority voting strategy to prevent a term from having more than\none leader. Compared to Paxos, this strategy is more straightforward but\nmight lead to the issue of repetitive split votes, causing the election\nto repeat over and over. Therefore, Raft asks each node to use a\nrandomized timeout value to ensure that the possibility of multiple\nnodes starting an election simultaneously is low. Although this approach\nseems unstable intuitively, it has been proven to be surprisingly\nefficient \u003csup id=\"fnref1:22\"\u003e\u003ca href=\"#fn:22\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e22\u003c/a\u003e\u003c/sup\u003e \u003csup id=\"fnref2:27\"\u003e\u003ca href=\"#fn:27\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e27\u003c/a\u003e\u003c/sup\u003e. Additionally, another\nnotable design of Raft is that it enforces a strong leadership and only\nallows a candidate with an up-to-date log to become the leader. While\nthe leader will re-transmit missing logs to its followers later. This\nhas simplified the message flow during election stage.\u003c/p\u003e\n\u003ch3 id=\"42---correctness-and-fault-tolerance\"\u003e4.2 - Correctness and Fault-Tolerance\u003c/h3\u003e\n\u003cp\u003eBoth Raft and Paxos are similar in the assumptions they make and the\nenvironment they work under. They all assume an asynchronous and\nnon-byzantine fault tolerance system. They can all guarantee safety if\nmajority of nodes are online and survive less than half of the node\nfailures. Besides, they both gave up some degree of liveness to\ncircumvent the FLP impossibility theorem.\u003c/p\u003e\n\u003ch3 id=\"43---performance\"\u003e4.3 - Performance\u003c/h3\u003e\n\u003cp\u003eThe authors of Raft stated that Raft has approximately the same level of\nefficiency as (Multi-)Paxos. A study \u003csup id=\"fnref:28\"\u003e\u003ca href=\"#fn:28\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e28\u003c/a\u003e\u003c/sup\u003e\nshowed that Raft and Paxos clusters take roughly the same amount of time\nto establish consensus under various cluster setups. Another study\n\u003csup id=\"fnref:29\"\u003e\u003ca href=\"#fn:29\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e29\u003c/a\u003e\u003c/sup\u003e demonstrated that Raft exhibited relatively stable\nconsensus times across parameter changes, while Paxos was more sensitive\nto changes in network latency which result in the increase of consensus\ntime. However, it is worth noting that there are only a few studies that\nfocus on comparing the performance of Paxos and Raft, and the two\nexamples we mentioned may not be conclusive. This could be one of the\nfuture research direction of consensus algorithm.\u003c/p\u003e\n\u003ch2 id=\"5---conclusion\"\u003e5 - Conclusion\u003c/h2\u003e\n\u003cp\u003eIn this paper, we have firstly introduced the foundations of consensus -\nthe Byzantine Generals Problem and the FLP impossibility result. We then\ndiscussed two state machine replication algorithms - Paxos, and Raft. We\nhave gone into depth in Raft to discuss how it works, how it can be\nimproved in terms of security and performance, and how it differs from\nPaxos in leader elections.\u003c/p\u003e\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e\n\u003cdiv class=\"footnotes\" role=\"doc-endnotes\"\u003e\n\u003chr\u003e\n\u003col\u003e\n\u003cli id=\"fn:1\"\u003e\n\u003cp\u003eBhardwaj, Prof. Rashmi, and Debabrata Datta. 2020. \u0026ldquo;Consensus Algorithm.\u0026rdquo; In, 91\u0026ndash;107. \u003ca href=\"https://doi.org/10.1007/978-3-030-38677-1_5\"\u003ehttps://doi.org/10.1007/978-3-030-38677-1_5\u003c/a\u003e.\u0026#160;\u003ca href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:2\"\u003e\n\u003cp\u003ePease, M., R. Shostak, and L. Lamport. 1980. \u0026ldquo;Reaching Agreement in the\nPresence of Faults.\u0026rdquo; \u003cem\u003eJ. ACM\u003c/em\u003e 27 (2): 228\u0026ndash;34.\n\u003ca href=\"https://doi.org/10.1145/322186.322188\"\u003ehttps://doi.org/10.1145/322186.322188\u003c/a\u003e.\u0026#160;\u003ca href=\"#fnref:2\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:3\"\u003e\n\u003cp\u003eLamport, Leslie, Robert Shostak, and Marshall Pease. 1982. \u0026ldquo;The\nByzantine Generals Problem.\u0026rdquo; \u003cem\u003eACM Trans. Program. Lang. Syst.\u003c/em\u003e 4 (3):\n382\u0026ndash;401. \u003ca href=\"https://doi.org/10.1145/357172.357176\"\u003ehttps://doi.org/10.1145/357172.357176\u003c/a\u003e.\u0026#160;\u003ca href=\"#fnref:3\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u0026#160;\u003ca href=\"#fnref1:3\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u0026#160;\u003ca href=\"#fnref2:3\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u0026#160;\u003ca href=\"#fnref3:3\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:4\"\u003e\n\u003cp\u003eCoulouris, George, Jean Dollimore, Tim Kindberg, and Gordon Blair. 2011.\n\u003cem\u003eDistributed Systems: Concepts and Design\u003c/em\u003e. 5th ed. USA: Addison-Wesley\nPublishing Company.\u0026#160;\u003ca href=\"#fnref:4\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u0026#160;\u003ca href=\"#fnref1:4\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:5\"\u003e\n\u003cp\u003eConsidine, Jeffrey, Matthias Fitzi, Matthew Franklin, Leonid A. Levin,\nUeli Maurer, and David Metcalf. 2005. \u0026ldquo;Byzantine Agreement Given Partial\nBroadcast.\u0026rdquo; \u003cem\u003eJournal of Cryptology\u003c/em\u003e 18 (3): 191\u0026ndash;217.\u0026#160;\u003ca href=\"#fnref:5\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:6\"\u003e\n\u003cp\u003eLamport, L. 1983. \u0026ldquo;The Weak Byzantine Generals Problem.\u0026rdquo; \u003cem\u003eJ. ACM\u003c/em\u003e 30\n(3): 668\u0026ndash;76. \u003ca href=\"https://doi.org/10.1145/2402.322398\"\u003ehttps://doi.org/10.1145/2402.322398\u003c/a\u003e.\u0026#160;\u003ca href=\"#fnref:6\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:7\"\u003e\n\u003cp\u003eDolev, Danny, Nancy A. Lynch, Shlomit S. Pinter, Eugene W. Stark, and\nWilliam E. Weihl. 1986. \u0026ldquo;Reaching Approximate Agreement in the Presence\nof Faults.\u0026rdquo; \u003cem\u003eJ. ACM\u003c/em\u003e 33 (3): 499\u0026ndash;516.\n\u003ca href=\"https://doi.org/10.1145/5925.5931\"\u003ehttps://doi.org/10.1145/5925.5931\u003c/a\u003e.\u0026#160;\u003ca href=\"#fnref:7\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:8\"\u003e\n\u003cp\u003eFischer, Michael J., Nancy A. Lynch, and Michael S. Paterson. 1985.\n\u0026ldquo;Impossibility of Distributed Consensus with One Faulty Process.\u0026rdquo; \u003cem\u003eJ.\nACM\u003c/em\u003e 32 (2): 374\u0026ndash;82. \u003ca href=\"https://doi.org/10.1145/3149.214121\"\u003ehttps://doi.org/10.1145/3149.214121\u003c/a\u003e.\u0026#160;\u003ca href=\"#fnref:8\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:9\"\u003e\n\u003cp\u003eHoward, Heidi. 2019. \u0026ldquo;Distributed Consensus Revised.\u0026rdquo;\n\u003ca href=\"https://doi.org/10.17863/CAM.38840\"\u003ehttps://doi.org/10.17863/CAM.38840\u003c/a\u003e.\u0026#160;\u003ca href=\"#fnref:9\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:10\"\u003e\n\u003cp\u003eDolev, Danny, Cynthia Dwork, and Larry Stockmeyer. 1987. \u0026ldquo;On the Minimal\nSynchronism Needed for Distributed Consensus.\u0026rdquo; \u003cem\u003eJ. ACM\u003c/em\u003e 34 (1): 77\u0026ndash;97.\n\u003ca href=\"https://doi.org/10.1145/7531.7533\"\u003ehttps://doi.org/10.1145/7531.7533\u003c/a\u003e.\u0026#160;\u003ca href=\"#fnref:10\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u0026#160;\u003ca href=\"#fnref1:10\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u0026#160;\u003ca href=\"#fnref2:10\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u0026#160;\u003ca href=\"#fnref3:10\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:11\"\u003e\n\u003cp\u003eDwork, Cynthia, Nancy Lynch, and Larry Stockmeyer. 1988. \u0026ldquo;Consensus in\nthe Presence of Partial Synchrony.\u0026rdquo; \u003cem\u003eJ. ACM\u003c/em\u003e 35 (2): 288\u0026ndash;323.\n\u003ca href=\"https://doi.org/10.1145/42282.42283\"\u003ehttps://doi.org/10.1145/42282.42283\u003c/a\u003e.\u0026#160;\u003ca href=\"#fnref:11\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u0026#160;\u003ca href=\"#fnref1:11\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u0026#160;\u003ca href=\"#fnref2:11\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:12\"\u003e\n\u003cp\u003eChandra, Tushar Deepak, and Sam Toueg. 1996. \u0026ldquo;Unreliable Failure\nDetectors for Reliable Distributed Systems.\u0026rdquo; \u003cem\u003eJ. ACM\u003c/em\u003e 43 (2): 225\u0026ndash;67.\n\u003ca href=\"https://doi.org/10.1145/226643.226647\"\u003ehttps://doi.org/10.1145/226643.226647\u003c/a\u003e.\u0026#160;\u003ca href=\"#fnref:12\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:13\"\u003e\n\u003cp\u003eCastro, Miguel, and Barbara Liskov. 1999. \u0026ldquo;Practical Byzantine Fault\nTolerance.\u0026rdquo; In \u003cem\u003eProceedings of the Third Symposium on Operating Systems\nDesign and Implementation\u003c/em\u003e, 173\u0026ndash;86. OSDI \u0026lsquo;99. USA: USENIX Association.\u0026#160;\u003ca href=\"#fnref:13\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:14\"\u003e\n\u003cp\u003eLamport, Leslie. 1978. \u0026ldquo;Time, Clocks, and the Ordering of Events in a\nDistributed System.\u0026rdquo; \u003cem\u003eCommun. ACM\u003c/em\u003e 21 (7): 558\u0026ndash;65.\n\u003ca href=\"https://doi.org/10.1145/359545.359563\"\u003ehttps://doi.org/10.1145/359545.359563\u003c/a\u003e.\u0026#160;\u003ca href=\"#fnref:14\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:15\"\u003e\n\u003cp\u003eLamport, Leslie. 1998. \u0026ldquo;The Part-Time Parliament.\u0026rdquo; \u003cem\u003eACM Trans. Comput. Syst.\u003c/em\u003e\n16 (2): 133\u0026ndash;69. \u003ca href=\"https://doi.org/10.1145/279227.279229\"\u003ehttps://doi.org/10.1145/279227.279229\u003c/a\u003e.\u0026#160;\u003ca href=\"#fnref:15\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:16\"\u003e\n\u003cp\u003eDu, Hao, and David J. St. Hilaire. 2009. \u0026ldquo;Multi-Paxos : An\nImplementation and Evaluation.\u0026rdquo; In.\n\u003ca href=\"https://api.semanticscholar.org/CorpusID:13002642\"\u003ehttps://api.semanticscholar.org/CorpusID:13002642\u003c/a\u003e.\u0026#160;\u003ca href=\"#fnref:16\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:17\"\u003e\n\u003cp\u003eLamport, Leslie. 2006. \u0026ldquo;Fast Paxos.\u0026rdquo; \u003cem\u003eDistributed Computing\u003c/em\u003e 19:\n79\u0026ndash;103.\u0026#160;\u003ca href=\"#fnref:17\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:18\"\u003e\n\u003cp\u003eVan Renesse, Robbert, and Deniz Altinbuken. 2015. \u0026ldquo;Paxos Made Moderately\nComplex\u0026rdquo; 47 (3). \u003ca href=\"https://doi.org/10.1145/2673577\"\u003ehttps://doi.org/10.1145/2673577\u003c/a\u003e.\u0026#160;\u003ca href=\"#fnref:18\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:19\"\u003e\n\u003cp\u003eLamport, Leslie. 2001. \u0026ldquo;Paxos Made Simple.\u0026rdquo; \u003cem\u003eSigact News - SIGACT\u003c/em\u003e 32\n(January).\u0026#160;\u003ca href=\"#fnref:19\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:20\"\u003e\n\u003cp\u003eBoichat, Romain, Partha Dutta, Svend Frølund, and Rachid Guerraoui. 2003. \u0026ldquo;Deconstructing Paxos.\u0026rdquo; \u003cem\u003eSIGACT News\u003c/em\u003e 34 (1): 47\u0026ndash;67. \u003ca href=\"https://doi.org/10.1145/637437.637447\"\u003ehttps://doi.org/10.1145/637437.637447\u003c/a\u003e.\u0026#160;\u003ca href=\"#fnref:20\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:21\"\u003e\n\u003cp\u003eLampson, Butler. 2001. \u0026ldquo;The Abcd\u0026rsquo;s of Paxos.\u0026rdquo; In \u003cem\u003eProceedings of the\nTwentieth Annual Acm Symposium on Principles of Distributed Computing\u003c/em\u003e,\n13. PODC \u0026lsquo;01. New York, NY, USA: Association for Computing Machinery.\n\u003ca href=\"https://doi.org/10.1145/383962.383969\"\u003ehttps://doi.org/10.1145/383962.383969\u003c/a\u003e.\u0026#160;\u003ca href=\"#fnref:21\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:22\"\u003e\n\u003cp\u003eOngaro, Diego, and John Ousterhout. 2014. \u0026ldquo;In Search of an\nUnderstandable Consensus Algorithm.\u0026rdquo; In \u003cem\u003eProceedings of the 2014 Usenix\nConference on Usenix Annual Technical Conference\u003c/em\u003e, 305\u0026ndash;20. USENIX\nAtc'14. USA: USENIX Association.\u0026#160;\u003ca href=\"#fnref:22\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u0026#160;\u003ca href=\"#fnref1:22\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:23\"\u003e\n\u003cp\u003eCopeland, Christopher, and Hongxia Zhong. 2016. \u0026ldquo;Tangaroa: A Byzantine\nFault Tolerant Raft.\u0026rdquo; Tech. rep.\u0026#160;\u003ca href=\"#fnref:23\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:24\"\u003e\n\u003cp\u003eKim, Donghee, Inshil Doh, and Kijoon Chae. 2021. \u0026ldquo;Improved Raft\nAlgorithm Exploiting Federated Learning for Private Blockchain\nPerformance Enhancement.\u0026rdquo; In \u003cem\u003e2021 International Conference on\nInformation Networking (Icoin)\u003c/em\u003e, 828\u0026ndash;32.\n\u003ca href=\"https://doi.org/10.1109/ICOIN50884.2021.9333932\"\u003ehttps://doi.org/10.1109/ICOIN50884.2021.9333932\u003c/a\u003e.\u0026#160;\u003ca href=\"#fnref:24\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:25\"\u003e\n\u003cp\u003eWang, Rihong, Lifeng Zhang, Quanqing Xu, and Hang Zhou. 2019. \u0026ldquo;K-Bucket\nBased Raft-Like Consensus Algorithm for Permissioned Blockchain.\u0026rdquo; In\n\u003cem\u003e2019 Ieee 25th International Conference on Parallel and Distributed\nSystems (Icpads)\u003c/em\u003e, 996\u0026ndash;99.\n\u003ca href=\"https://doi.org/10.1109/ICPADS47876.2019.00152\"\u003ehttps://doi.org/10.1109/ICPADS47876.2019.00152\u003c/a\u003e.\u0026#160;\u003ca href=\"#fnref:25\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:26\"\u003e\n\u003cp\u003eWang, Yuchen, Shuang Li, Lei Xu, and Lizhen Xu. 2021. \u0026ldquo;Improved Raft\nConsensus Algorithm in High Real-Time and Highly Adversarial\nEnvironment.\u0026rdquo; In \u003cem\u003eWeb Information Systems and Applications\u003c/em\u003e, edited by\nChunxiao Xing, Xiaoming Fu, Yong Zhang, Guigang Zhang, and Chaolemen\nBorjigin, 718\u0026ndash;26. Cham: Springer International Publishing.\u0026#160;\u003ca href=\"#fnref:26\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:27\"\u003e\n\u003cp\u003eHoward, Heidi, and Richard Mortier. 2020. \u0026ldquo;Paxos Vs Raft: Have We\nReached Consensus on Distributed Consensus?\u0026rdquo; In \u003cem\u003eProceedings of the 7th\nWorkshop on Principles and Practice of Consistency for Distributed\nData\u003c/em\u003e. PaPoC \u0026lsquo;20. New York, NY, USA: Association for Computing\nMachinery. \u003ca href=\"https://doi.org/10.1145/3380787.3393681\"\u003ehttps://doi.org/10.1145/3380787.3393681\u003c/a\u003e.\u0026#160;\u003ca href=\"#fnref:27\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u0026#160;\u003ca href=\"#fnref1:27\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u0026#160;\u003ca href=\"#fnref2:27\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:28\"\u003e\n\u003cp\u003eVan Dame, Kelsi Rado, Thomas Bronson Bergmann, Mohamed Aichouri, and\nMaria Pantoja. 2022. \u0026ldquo;A Comparative Study of Consensus Algorithms for\nDistributed Systems.\u0026rdquo; In \u003cem\u003eHigh Performance Computing\u003c/em\u003e, edited by Isidoro\nGitler, Carlos Jaime Barrios Hernández, and Esteban Meneses, 120\u0026ndash;30.\nCham: Springer International Publishing.\u0026#160;\u003ca href=\"#fnref:28\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:29\"\u003e\n\u003cp\u003eHidayat, Siswandi Agung, Wahyu Juniardi, Ali Akbar Khatami, and Riri\nFitri Sari. 2022. \u0026ldquo;Performance Comparison and Analysis of Paxos, Raft\nand Pbft Using Ns3.\u0026rdquo; In \u003cem\u003e2022 Ieee International Conference on Internet\nof Things and Intelligence Systems (Iotais)\u003c/em\u003e, 304\u0026ndash;10.\n\u003ca href=\"https://doi.org/10.1109/IoTaIS56727.2022.9975938\"\u003ehttps://doi.org/10.1109/IoTaIS56727.2022.9975938\u003c/a\u003e.\u0026#160;\u003ca href=\"#fnref:29\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n","description":null,"image":"/raft.jpg","permalink":"/blogs/consensus-raft/","title":"Distributed Consensus and Raft - A Survey"},{"content":"\u003ch2 id=\"purpose\"\u003e\u003cstrong\u003ePurpose\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eI was tasked to build a \u003cu\u003edata synchronization pipeline\u003c/u\u003e between ElasticSearch and PostgreSQL, in order to incrementally sync search data into ES. I didn\u0026rsquo;t want to handcraft too much so I looked into three existing middlewares: PGSync, Logstash+JDBC, and Elastic-Connector. This blog will discuss their pros and cons based on my actual experiments. Besides, in the last section, I will discuss other options to sync data and why I didn\u0026rsquo;t consider them.\u003c/p\u003e\n\u003cp\u003eThe conclusion is that\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eLogstash+JDBC\u003c/code\u003e is the best choice for my specific use cases despite it has some disadvantages.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePGSync\u003c/code\u003e is pretty good middleware. But it has a bug. It also offers less flexibility and customization in terms of table relations.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eElastic-Connector\u003c/code\u003e for PostgreSQL is trash unless you only need very basic functionalities. It is more like a open-source framework for ppl to build own connectors on it.\u003c/li\u003e\n\u003cli\u003eRefer to last section for why I didn\u0026rsquo;t consider other options.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003ch2 id=\"what-i-need\"\u003e\u003cstrong\u003eWhat I need\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eI need two important features:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe middleware should be capable to \u003cu\u003eincrementally transforms and transfers data\u003c/u\u003e between ES and SQL. Some middlewares (e.g. some functionalities of Elastic-Connector) only support full-sync. Full-sync means sync everything by overriding the whole old ES index with the new one.\u003c/li\u003e\n\u003cli\u003eThe middleware should be able to perform \u003cu\u003ecomplex data transformations\u003c/u\u003e. Most importantly, nest/de-normalize SQL tables. This means nesting some child SQL tables into parent tables to make up a big JSON to store in ES.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eI don\u0026rsquo;t need exact real-time syncing for new changes. So syncing in intervals (e.g. every 20 seconds) is acceptable.\u003c/p\u003e\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003ch2 id=\"pgsync-vs-logstash\"\u003e\u003cstrong\u003ePGSync VS Logstash\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eLogstash is the most popular and widely-used middleware. It is developed and officially supported by ES team. However, I was initially attracted by PGSync  and decided to give it a try. It has many advantages over Logstash.\u003c/p\u003e\n\u003cp\u003eLogstash works by \u003ccode\u003eusing SQL to query database\u003c/code\u003e, extract changed data, then transform and send data to ElasticSearch. Instead, PGSync utilizes \u003ccode\u003elogical decoding\u003c/code\u003e feature of PostgreSQL and captures the change through the transaction logs. It doesn\u0026rsquo;t query database directly.\u003c/p\u003e\n\u003cp\u003eThis yields several advantages:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eKey points\u003c/th\u003e\n\u003cth\u003eLogstash\u003c/th\u003e\n\u003cth\u003ePGSync\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eImpact on DB\u003c/td\u003e\n\u003ctd\u003eHigh, since it queries DB directly using SQL\u003c/td\u003e\n\u003ctd\u003e✔️ Low, it passively captures data through logs\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;\u003c/td\u003e\n\u003ctd\u003e\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-\u003c/td\u003e\n\u003ctd\u003e\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eTracking Column\u003c/td\u003e\n\u003ctd\u003eNeeded, Logstash uses it to check for changes. A timestamp is often used. All tables to be synced need to have this column. And they need to be updated when changes happen\u003c/td\u003e\n\u003ctd\u003e✔️ Not needed\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;\u003c/td\u003e\n\u003ctd\u003e\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-\u003c/td\u003e\n\u003ctd\u003e\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eDeletion\u003c/td\u003e\n\u003ctd\u003e\u003cul\u003e\u003cli\u003eWe have to use soft deletion. Make \u003ccode\u003eis_deleted:Boolean\u003c/code\u003e column false when deleting. This is because if you hard delete a record, Logstash won\u0026rsquo;t know about it since it can\u0026rsquo;t see the tracking column any more. Unless extra efforts are made to ensure hard deletion consistency. \u003c/li\u003e \u003cli\u003e [Extra] However, in some cases soft deletion is the preferred approach for main DB anyway. \u003cul\u003e\u003cli\u003eFor example, recovery user data if he accidentally deleted something. Plus other similar reasons. \u003c/li\u003e \u003cli\u003e Besides, some articles mentioned massive hard deletion might make database index \u003ccode\u003efragmented\u003c/code\u003e (altho this is not the only cause) and affect performance. And if it gets too bad, the index should be reorganized or rebuilt. I did some readings on this topic. It doesn\u0026rsquo;t seem like it is a big problem for normal use cases. Check out \u003ca href=\"https://www.percona.com/blog/the-impacts-of-fragmentation-in-mysql/\"\u003e[\u003cu\u003ethis blog\u003c/u\u003e]\u003c/a\u003e on InnoDB engine\u003c/li\u003e \u003cli\u003eThe fun thing is I have literally came across two articles, the first one is \u0026ldquo;why you should do soft deletion\u0026rdquo;. The second one is \u0026ldquo;why soft deletion is bad\u0026rdquo;.😂 So I guess \u0026ldquo;soft deletion or not\u0026rdquo; is a case-by-case decision making.\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e\u003c/ul\u003e\u003c/td\u003e\n\u003ctd\u003e✔️ Can achieve hard/soft deletion\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"pgsync-300\"\u003e\u003cstrong\u003ePGSync (3.0.0)\u003c/strong\u003e\u003c/h2\u003e\n\u003ch3 id=\"a-bug\"\u003eA Bug\u003c/h3\u003e\n\u003cp\u003eI gave PGSync a try. One thing I gotta complain is the documentation is very broken and hard to understand. It is  made by a single developer, and has a small community.\u003c/p\u003e\n\u003cp\u003eThe version I used is 3.0.0. The syncing for a single table works pretty smooth. However, I encountered a bug when testing nested relationship. Incremental CREATE operation to child tables in a nested relationship won\u0026rsquo;t be reflected to ES. For example, suppose we nest \u003ccode\u003eReview\u003c/code\u003e tables inside \u003ccode\u003eMovie\u003c/code\u003e table. During the initial full-sync, everything works fine. However, in the subsequent syncing stages, creating a new \u003ccode\u003eReview\u003c/code\u003e table won\u0026rsquo;t be synced to ES.\u003c/p\u003e\n\u003cp\u003eI found a similar issue (\u003ca href=\"https://github.com/toluaina/pgsync/pull/493\"\u003ehttps://github.com/toluaina/pgsync/pull/493\u003c/a\u003e) raised. But his pull request doesn\u0026rsquo;t seem to fix the problem.\u003c/p\u003e\n\u003cp\u003eHere is a table summarized what works and what doesn\u0026rsquo;t, CUD stands for create/update/delete\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;\u003c/th\u003e\n\u003cth\u003eSingle Table\u003c/th\u003e\n\u003cth\u003eParent-Child table nesting\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eWill full-sync capture everything?\u003c/td\u003e\n\u003ctd\u003eYES\u003c/td\u003e\n\u003ctd\u003eYES\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eWill incremental CUD operation be captured and reflected to ES?\u003c/td\u003e\n\u003ctd\u003eYES\u003c/td\u003e\n\u003ctd\u003eif the CUD is made on parent table, YES; if UPDATE/DELETE is made on child table, YES; If the CREATE is made on child table. NO.\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"walk-around\"\u003eWalk-around\u003c/h3\u003e\n\u003cp\u003eThere is a walk-around to this issue. The primary issue lies in the fact that CREATE operations on the child table do not get properly reflected in ES. However, if we create a child table and then subsequently update an irrelevant field in parent table, all changes will be captured and synced to ES. This can solve the problem.\u003c/p\u003e\n\u003ch3 id=\"low-customization\"\u003eLow customization\u003c/h3\u003e\n\u003cp\u003eHowever, I soon realize another issue - the customization options are pretty limited. Our project is using generic foreign key to build relationships between some tables. Such relationship can\u0026rsquo;t be specified in PGSync\u0026rsquo;s descriptive JSON file. It is quite user-friendly but not as powerful as raw SQL, especially in terms of customizing relationships.\u003c/p\u003e\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003ch2 id=\"logstash--jdbc\"\u003e\u003cstrong\u003eLogstash + JDBC\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eNow, gotta go with Logstash. It has a big community and a lot of useful articles.\u003c/p\u003e\n\u003cp\u003eThose cons I mentioned earlier still hold. They caused some efforts to modify DB table and backend server logic to incorporate tracking column and soft deletion. But anyway I am happy with the strong customization capability provided by SQL and logstash\u0026rsquo;s internal filters.\u003c/p\u003e\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003ch2 id=\"elastic-connector\"\u003e\u003cstrong\u003eElastic-Connector\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://www.elastic.co/guide/en/enterprise-search/current/postgresql-connector-client-tutorial.html\"\u003e\u003cu\u003eOfficial guide on PostgreSQL-ES using connector\u003c/u\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/elastic/connectors/blob/8.11/docs/DOCKER.md\"\u003e\u003cu\u003eGeneral guide on how to run a connector in Docker\u003c/u\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eI also tried Elastic-Connector. After connecting ES to a connector, I can view it directly in Kibana GUI to schedule jobs and set up sync rules. This sounds pretty appealing to me.\u003c/p\u003e\n\u003cp\u003eIt is a pretty new middleware, and has literally 0 community resources. I only knew this middleware because it has top ranking on Google\u0026rsquo;s search result\u0026hellip;That was how it tricked me\u0026hellip; 😭\u003c/p\u003e\n\u003ch3 id=\"problems\"\u003eProblems\u003c/h3\u003e\n\u003cp\u003eIt took me a long time to even set up a connector. Due to the lack of community resource, sometimes I gotta check the source code of it to debug.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor example, it doesn\u0026rsquo;t even have a configuration option to disable SSL certification validation during the initial set up stages. I need to manually modify the source code to disable it and I hate doing this. Probably because this middleware is primarily made for native Elastic Cloud deployment\u0026hellip;\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAfter I got everything working, I tested with some dummy data. There are \u0026ldquo;basic sync rules\u0026rdquo; and \u0026ldquo;advanced sync rules\u0026rdquo;.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBasic sync rules will work for both \u003ccode\u003eincremental sync\u003c/code\u003e and \u003ccode\u003efull sync\u003c/code\u003e. While advance sync rule only works for \u003ccode\u003efull sync\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eBasic sync rules contain some very basic matching conditions.\u003c/li\u003e\n\u003cli\u003eThe \u0026ldquo;table nesting\u0026rdquo; I want is within the advanced rule for PostgreSQL connector \u003ca href=\"https://www.elastic.co/guide/en/enterprise-search/current/connectors-postgresql.html#:~:text=that%20Elastic%20Deployment.-,Sync%20rules,-Basic%20sync%20rules\"\u003e\u003cu\u003eLink\u003c/u\u003e\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is definitely not capable for my use cases. I don\u0026rsquo;t see any advantage of using this one instead of Logstash. Probably the only good thing is it has GUI integration inside Kibana.\u003c/p\u003e\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003ch2 id=\"other-options\"\u003e\u003cstrong\u003eOther options!!!\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eSome other doable options:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePostgreSQL-\u0026gt;Debezium-\u0026gt;Kafka-\u0026gt;ES Connector/Logstash-\u0026gt;ES\u003c/strong\u003e: I didn\u0026rsquo;t take this into consideration for our project because it seems like a resource-intensive solution, since two more middlewares as used. But it looks very interesting to me. Debezium is a CDC (change data capture) tool and also uses PostgreSQL\u0026rsquo;s \u003ccode\u003elogical decoding\u003c/code\u003e feature. Plus this solution provides great flexibility, customization and stability. Maybe one day I will give it a try.\u003c/li\u003e\n\u003cli\u003eThird party data ETL tools such AirByte, Estuary\u0026hellip;\u003c/li\u003e\n\u003cli\u003eIn your backend framework, it is doable to perform create/update/delete to both the main SQL database and ES simultaneously. It is doable but sounds like a bad idea to me.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003ch2 id=\"end\"\u003eEnd\u003c/h2\u003e\n\u003cp\u003eThanks for reading! It is a long article and hopefully I didn\u0026rsquo;t make any mistakes. I am not an ES expert but I indeed spent quite some time to research these stuff. Please feel free to drop a comment below if I got anything wrong.\u003c/p\u003e\n","description":null,"image":"/elk.jpg","permalink":"/blogs/middlewares-es-sql/","title":"Middlewares for Data Syncing between ElasticSearch and PostgreSQL"},{"content":"\u003ch2 id=\"purpose\"\u003ePurpose\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eDeploy ElasticSearch (8.X), Kibana (8.X), Logstash (8.X), and PostgreSQL14 (optional) as native services on a AWS EC2 Ubuntu VM\u003c/li\u003e\n\u003cli\u003eAllow outside access for ES and Kibana.\u003c/li\u003e\n\u003cli\u003eSet up data syncing between ES and PostgreSQL, using Logstash + PostgreSQL JDBC.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e!!!! \u003cstrong\u003e\u003cu\u003eNotice that this is a very simple test deployment but not a production-ready deployment!\u003c/u\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eI only want to:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003etest availability of ELK stack\u003c/li\u003e\n\u003cli\u003e!!!! create some deployed search APIs for my frontend colleagues to call (through a backend server as the proxy), making their development easier\u003c/li\u003e\n\u003c/ol\u003e\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003ch2 id=\"key-ideas\"\u003eKey Ideas\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eExpose port 9200 for ElasticSearch\u0026rsquo;s programmatic interface. Your backend server can use ElasticSearch\u0026rsquo;s REST APIs here.\u003c/li\u003e\n\u003cli\u003eExpose port 5601 for Kibana\u0026rsquo;s GUI admin interface. You can access it in your local machine\u0026rsquo;s browser.\u003c/li\u003e\n\u003cli\u003eDeploy Logstash for data syncing between ES and PostgreSQL.\u003c/li\u003e\n\u003cli\u003eI also included an extra section for deploying PostgreSQL. It is optional if you have a running and reachable DB already. I added this section cuz it is easier to set it up on the VM instead of AWS RDS for my testing purpose.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003ch2 id=\"why-this-guide\"\u003eWhy this Guide?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eI initially followed \u003cu\u003e\u003ca href=\"https://www.digitalocean.com/community/tutorials/how-to-install-elasticsearch-logstash-and-kibana-elastic-stack-on-ubuntu-22-04\"\u003e[\u003cstrong\u003ethis guide\u003c/strong\u003e]\u003c/a\u003e\u003c/u\u003e. However, it uses Version 7.X, which has different security settings than the latest 8.X. So Additional settings need to be configured for 8.X. Besides, this guides use Nginx as reverse proxy to handle all the traffic. But I want to skip this step and expose ES and Kibana directly to public.\u003c/li\u003e\n\u003cli\u003eElasticSearch\u0026rsquo;s official guide can be found \u003ca href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/deb.html\"\u003e[\u003cstrong\u003ehere\u003c/strong\u003e]\u003c/a\u003e. But it is sort of incomplete and contains redundant information.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003ch2 id=\"my-ec2-vm\"\u003eMy EC2 VM\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eSystem: Ubuntu 22.04.3 LTS (GNU/Linux 6.2.0-1018-aws x86_64)\u003c/li\u003e\n\u003cli\u003eMachine: t3.large, 2 vCPUs, 8GB memory. I tried 4GB and it is pretty laggy\u003c/li\u003e\n\u003cli\u003eFirewall: port 9200, 5601 open. Also open PostgreSQL\u0026rsquo;s default port if you want.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003ch2 id=\"es-and-kibana\"\u003eES and Kibana\u003c/h2\u003e\n\u003ch3 id=\"install-java\"\u003eInstall Java\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esudo apt update\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esudo apt install default-jdk\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003echeck for success:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ejava -version\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ejavac -version\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"install-elasticsearch-8113\"\u003eInstall ElasticSearch (8.11.3)\u003c/h3\u003e\n\u003cp\u003eInstall signing key.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecurl -fsSL https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elastic.gpg\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eecho \u0026quot;deb [signed-by=/usr/share/keyrings/elastic.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\u0026quot; | sudo tee /etc/apt/sources.list.d/elastic-8.x.list\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eInstall ES\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esudo apt update\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esudo apt install elasticsearch=8.11.3\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNow, start ES as a service, it is gonna take a while\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esudo systemctl start elasticsearch\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHealth check\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esudo systemctl status elasticsearch\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThen, we reset the password. It is easier to reset it than to find the default one in logs.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esudo /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe password should have been output to the terminal, copy it, then store it in an env variable:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eexport ES_PWD='\u0026lt;THE PASSWORD VALUE\u0026gt;'\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTest connection locally, a JSON should be returned\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecurl -k -X GET -u elastic:$ES_PWD \u0026quot;https://localhost:9200\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNow, we check if this port has been exposed to outside traffic successfully, open your \u003cstrong\u003elocal machine\u0026rsquo;s\u003c/strong\u003e terminal, run:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecurl -k -X GET -u elastic:\u0026lt;THE PASSWORD VALUE\u0026gt; \u0026quot;https://\u0026lt;Remote VM IP\u0026gt;:9200\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe same json as last step should be returned.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eVery important: We use -k to bypass the certification validation, so that the request can be sent even if our cert is self-signed in ES. Otherwise, the request will be rejected by CRUL. Using self-signed Certification will yield a signficant security threat (E.g. Man-in-the-middle attack). It is highly suggested to add a valid certificate as soon as possible\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eIf you failed somewhere, troubeshotting\u003c/em\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003echeck your VM firewall. Is 9200 open?\u003c/li\u003e\n\u003cli\u003eHave you messed up ES\u0026rsquo;s config file? Open \u003ccode\u003esudo nano /etc/elasticsearch/elasticsearch.yml\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003echeck that \u003ccode\u003ehttp.host\u003c/code\u003e should be \u003ccode\u003e0.0.0.0\u003c/code\u003e. This is the default setting.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enetwork.host\u003c/code\u003e should be commented or set as \u003ccode\u003elocalhost\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"install-kibana-8113\"\u003eInstall Kibana (8.11.3)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eInstall Kibana \u003ccode\u003esudo apt-get update \u0026amp;\u0026amp; sudo apt-get install kibana=8.11.3\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eStart Kibana \u003ccode\u003esudo systemctl start kibana\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eHealth check \u003ccode\u003esudo systemctl status kibana\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNow we edit config to allow outside traffic, open the config file:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esudo nano /etc/kibana/kibana.yml\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUNCOMMENT and/or EDIT following configs, when you are done, don\u0026rsquo;t forget to CTRL+S to save !\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e!!! Make sure you uncomment them by removing the #\u003c/li\u003e\n\u003cli\u003e!!! you can press CTRL+W to search. It is faster than scolling down\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eserver.host: 0.0.0.0\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eserver.port: 5601\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eelasticsearch.hosts: [\u0026quot;http://localhost:9200\u0026quot;]\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRestart Kibana \u003ccode\u003esudo systemctl restart kibana\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eGo to \u003ccode\u003e\u0026lt;YOUR VM IP\u0026gt;:5601\u003c/code\u003e in your \u003cstrong\u003elocal machine\u0026rsquo;s browser\u003c/strong\u003e, you will get prompted to enter a token. If nothing shows up, wait for a while cuz it takes sometime for Kibana to start.\u003c/p\u003e\n\u003cp\u003eNow, we re-generate an enrolment token for kibana to use\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esudo /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEnter this token.\u003c/p\u003e\n\u003cp\u003eThen, you will be prompted to enter a verification code\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003erun \u003ccode\u003ejournalctl -u kibana\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003ethen keep scolling down by pressing the down arrow on your keyboard. On the last page, you can find the code there.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFinally, you can use username/password to login, we have genereated the password for user \u003ccode\u003eelastic\u003c/code\u003e in earlier steps and stored it in an env variable. If you can\u0026rsquo;t find it, run \u003ccode\u003eecho $ES_PWD\u003c/code\u003e. If you have lost it, no worries, follow earlier steps to generate a new one.\u003c/p\u003e\n\u003ch3 id=\"uninstall\"\u003eUninstall\u003c/h3\u003e\n\u003cp\u003eDuring my setup, I frequently uninstall-reinstall ES and Kibana. Using \u003ccode\u003eapt remove\u003c/code\u003e, \u003ccode\u003epurge\u003c/code\u003e will not fully remove all configuration files for ES. Follow \u003ca href=\"https://stackoverflow.com/questions/45585881/how-to-remove-elasticsearch-from-ubuntu\"\u003e[\u003cstrong\u003ethis guide\u003c/strong\u003e]\u003c/a\u003e to manually \u003ccode\u003erm -rf\u003c/code\u003e relevant folders for a full clean-up.\u003c/p\u003e\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003ch2 id=\"postgresql\"\u003ePostgreSQL\u003c/h2\u003e\n\u003cp\u003eSkip this section if you have any available deployed PostgreSQL ready. Otherwise, you can do it in a VM and I personally find it easier.\u003c/p\u003e\n\u003cp\u003eWe also gonna expose it to outside traffic so that you can connect to it from your local machine and easily insert data when testing Logstash.\u003c/p\u003e\n\u003ch3 id=\"install\"\u003eInstall\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esudo apt update\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esudo apt install postgresql postgresql-contrib\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003estart service \u003ccode\u003esudo systemctl start postgresql\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003ehealth check \u003ccode\u003esudo systemctl status postgresql\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"configure\"\u003eConfigure\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003econnect to shell \u003ccode\u003esudo -u postgres psql\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSet up your DB, DB user, DB user password, grant permissions, etc.\u003c/li\u003e\n\u003cli\u003eNow, we edit config, open \u003ccode\u003esudo nano /etc/postgresql/\u0026lt;version\u0026gt;/main/postgresql.conf\u003c/code\u003e, make sure you replace the version number with the actual one. To find the version number, \u003ccode\u003esudo ls /etc/postgresql\u003c/code\u003e. Then, EDIT:\n\u003cul\u003e\n\u003cli\u003eopen to remote connection \u003ccode\u003elisten_addresses = '*'\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eadd your ip to trust list. Add this line \u003ccode\u003ehost    all             \u0026lt;DB USERNAME\u0026gt;          \u0026lt;YOUR IP ADDRESS\u0026gt;/32           md5\u003c/code\u003e. It is likely that you don\u0026rsquo;t have a static public ip from your ISP. Just google any \u0026ldquo;find my ip\u0026rdquo; tool and use that IP unless it is changed (which will likely to happen often, e.g. you turn off your PC). If you have made everything working, but one day later PostgreSQL produces some ip-blocked errors, then change this line to your new public ip.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e[Optional] Test connection from your \u003cstrong\u003elocal machine\u0026rsquo;s\u003c/strong\u003e shell\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003epsql -h \u0026lt;remote machine ip\u0026gt; -p \u0026lt;port\u0026gt; -U \u0026lt;DB USER\u0026gt; -d \u0026lt;DB NAME\u0026gt;\u003c/code\u003e to make sure you can connect to it locally.\u003c/li\u003e\n\u003cli\u003eThen, you can use any DB admin GUI on your local PC e.g. DBeaver to play around and insert data when testing Logstash.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003ch2 id=\"logstash\"\u003eLogstash\u003c/h2\u003e\n\u003ch3 id=\"install-logstash\"\u003eInstall Logstash\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esudo apt install logstash\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"download-postgresql-jdbc\"\u003eDownload PostgreSQL jdbc\u003c/h3\u003e\n\u003cp\u003eI am connecting PostgreSQL to ES so I need JDBC as a plugin to Logstash. If you are using MySQL, please download MySQL JDBC.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003edownload the jdbc jar to your local machine. \u003ca href=\"https://jdbc.postgresql.org/download/\"\u003e[\u003cstrong\u003elink\u003c/strong\u003e]\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003enow, we upload this jar to the VM. I used scp here.\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003escp -i \u0026lt;path to your private key on your local machine\u0026gt; \u0026lt;path to the jdbc jar file on your local machine\u0026gt; \u0026lt;VM username\u0026gt;@\u0026lt;VM ip\u0026gt;:\u0026lt;VM directory path to store the file\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003enow, go your VM, you should be able to see this file\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"insert-dummy-data-in-postgresql\"\u003eInsert dummy data in postgresql\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003einsert dummy data in postgresql\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"creata-an-api-key-in-kibana\"\u003eCreata an api key in Kibana\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003ego to kibana, create an api key in \u0026ldquo;Logstash\u0026rdquo; format. Copy and save it in your notepad.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"create-logstash-configuration-file\"\u003eCreate logstash configuration file\u003c/h3\u003e\n\u003cp\u003eNow, we create two configuration file for Logstash to use. \u003ccode\u003elogstash.conf\u003c/code\u003e is the main configuration file. I also created a \u003ccode\u003estatement.sql\u003c/code\u003e and let Logstash refer to this file for data syncing SQL. Or, you could put the SQL code inside \u003ccode\u003elogstash.conf\u003c/code\u003e, which also works.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eplace \u003ccode\u003estatement.sql\u003c/code\u003e in \u003ccode\u003esudo nano ~/statement.sql\u003c/code\u003e (or anywhere you like)\u003c/li\u003e\n\u003cli\u003eplace \u003ccode\u003elogstash.conf\u003c/code\u003e in \u003ccode\u003esudo nano ~/logstash.conf\u003c/code\u003e (or anywhere you like)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNow, we create \u003ccode\u003elogstash.conf\u003c/code\u003e. I believe that before trying to deploy to VM, you must have tried running logstash locally. There are a couple of things that need to be changed in this file accordingly. This file will vary from one person to another. Here is a checklist including what I changed. Make sure you thoroughly go through yours.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003emodify \u003ccode\u003ejdbc_driver_library\u003c/code\u003e to the absolute path where you stored the JDBC on VM\u003c/li\u003e\n\u003cli\u003emodify \u003ccode\u003ejdbc_connection_string\u003c/code\u003e if needed, make sure it points to your postgresql\u003c/li\u003e\n\u003cli\u003emodify \u003ccode\u003eapi_key\u003c/code\u003e to the one you just created earlier\u003c/li\u003e\n\u003cli\u003esince I used a seperate SQL file, I need to modify \u003ccode\u003estatement_filepath\u003c/code\u003e to the abosolute path of the file. I placed \u003ccode\u003estatement.sql\u003c/code\u003e in home. So it is \u003ccode\u003e/home/\u0026lt;User\u0026gt;/statement.sql\u003c/code\u003e. !!! Make sure you use absoluate path here!!!, not relative path like \u003ccode\u003e./statement.sql\u003c/code\u003e ❌\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"run-logstash\"\u003eRun logstash\u003c/h3\u003e\n\u003cp\u003eHere, I run logstash through terminal directly instead of running it as a service. Because it is easier to specify extra arguments (I am using aggregate filter, so I need to limit number of worker thread to be 1 \u003ccode\u003e-w 1\u003c/code\u003e). If you are not using this aggregate filter then NVM.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNormal: \u003ccode\u003esudo /usr/share/logstash/bin/logstash -f ~/logstash.conf\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eFor me (aggregate filter) \u003ccode\u003esudo /usr/share/logstash/bin/logstash -f ~/logstash.conf -w 1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe process should be running.\u003c/p\u003e\n\u003cp\u003eSince we are not running it as a service, we need to make sure the process is running after we close the shell, to achieve this, stop the process above, instead, do:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e nohup sudo /usr/share/logstash/bin/logstash -f ~/logstash.conf \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 \u0026amp;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eFor me (aggregate filter) \u003ccode\u003e nohup sudo /usr/share/logstash/bin/logstash -f ~/logstash.conf -w 1 \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 \u0026amp;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e(I also manually discarded stdout output)\u003c/p\u003e\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003ch2 id=\"good-jooooob\"\u003eGOOD JOOOOOB\u003c/h2\u003e\n\u003cp\u003eGOOOD JOOOOOOB.\u003c/p\u003e\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003ch2 id=\"what-next-for-a-better-set-up\"\u003eWhat Next for a better set up?\u003c/h2\u003e\n\u003cp\u003eSome of my thoughts.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e!!! Add more ES nodes and form a cluster to handle high concurrency\u003c/li\u003e\n\u003cli\u003eHave a valid SSL certificate\u003c/li\u003e\n\u003cli\u003eUse Nginx as reverse proxy and handle all SSL. Hide ES and Kibana.\u003c/li\u003e\n\u003cli\u003eOptimize security settings\u003c/li\u003e\n\u003cli\u003eetc\u0026hellip;\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003ch2 id=\"extra-why-backend-as-a-proxy\"\u003eExtra: Why backend as a proxy?\u003c/h2\u003e\n\u003cp\u003eWhy we need to use backend server as a proxy to bridge frontend and ElasticSearch? Can\u0026rsquo;t we let frontend access ES directly to reduce network overhead? By:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003esetting up an frontend only API key with limited query permission\u003c/li\u003e\n\u003cli\u003elet ElasticSearch do the input validation/sanitization\u003c/li\u003e\n\u003cli\u003epre-construct search query associated with API key in ElasticSearch\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHere are some of the reasons why we can\u0026rsquo;t do it, there may be more:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eless secure than a dedicated backend server.\u003c/li\u003e\n\u003cli\u003esome search engine natively support this, e.g. TypeSense. ElasticSearch recently added support for this, with the help of \u0026ldquo;Search Application\u0026rdquo;. However,\n\u003cul\u003e\n\u003cli\u003e\u0026ldquo;Search Application\u0026rdquo; is still in beta.\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;Search Application\u0026rdquo; is premium account only.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-application-security.html\"\u003e[\u003cstrong\u003eREAD MORE\u003c/strong\u003e]\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"end\"\u003eEnd\u003c/h2\u003e\n\u003cp\u003eThanks for reading!\u003c/p\u003e\n","description":null,"image":"/elk.jpg","permalink":"/blogs/deploy-elk-ubuntu/","title":"Deploy ELK Stack on a Remote Ubuntu VM"},{"content":"\u003cp\u003eSome good tech tutorials/blogs/sites that I found helpful in my study and programming.\u003c/p\u003e\n\u003ch2 id=\"backendsystem-design\"\u003eBackend/System Design\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://jenkov.com/tutorials/java-concurrency/index.html\"\u003e[Site]\u003c/a\u003e\u003ca href=\"https://www.youtube.com/watch?v=mTGdtC9f4EU\u0026amp;list=PLL8woMHwr36EDxjUoCzboZjedsnhLP1j4\"\u003e[Course]\u003c/a\u003e\u003c/strong\u003e Java multi-threading course. Highly recommended. You can also find other advanced Java tutorials on this site.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://discord.com/blog/how-discord-stores-trillions-of-messages\"\u003e[Article]\u003c/a\u003e\u003ca href=\"https://discord.com/blog/how-discord-stores-billions-of-messages\"\u003e[Article]\u003c/a\u003e\u003c/strong\u003e How Discord use Cassandra and ScyllaDB to store trillions of messages.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://www.youtube.com/watch?v=2PPSXonhIck\"\u003e[Tutorial]\u003c/a\u003e\u003ca href=\"https://github.com/alex996/presentations/blob/master/auth.md\"\u003e[Notes]\u003c/a\u003e\u003c/strong\u003e  Authentication on the web. JWT, session, cookie, XSS, CSRF\u0026hellip;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://www.amazon.com.au/System-Design-Interview-insiders-Second/dp/B08CMF2CQF\"\u003e[BOOK]\u003c/a\u003e\u003c/strong\u003e \u003cem\u003eSystem Design Interview – An insider\u0026rsquo;s guide\u003c/em\u003e by Alex Xu\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://www.youtube.com/watch?v=7hZXBrI2TjY\u0026amp;list=PL5aURjJ6mdUecuFvHqay0xZ0iN9SOe5nE\u0026amp;index=3\"\u003e[Tutorial]\u003c/a\u003e\u003c/strong\u003e System Design Interview with AWS. Design Youtube, Whatsapp, Twitter.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://www.bezkoder.com/\"\u003e[SITE]\u003c/a\u003e\u003c/strong\u003e Full stack web dev reference site.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://www.freecodecamp.org/news/what-exactly-is-client-side-rendering-and-hows-it-different-from-server-side-rendering-bd5c786b340d/\"\u003e[ARTICLE]\u003c/a\u003e\u003c/strong\u003e Client-side rendering VS server-side rendering\u003c/p\u003e\n\u003cbr\u003e\r\n\u003ch2 id=\"machine-learningdata\"\u003eMachine Learning/Data\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e[\u003ca href=\"https://blog.insightdatascience.com/bias-variance-tradeoff-explained-fa2bc28174c4\"\u003eARTICLE\u003c/a\u003e]\u003c/strong\u003e An in-depth explanation about bias and variance.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e[\u003ca href=\"https://www.jeremyjordan.me/batch-normalization/\"\u003eARTICLE\u003c/a\u003e]\u003c/strong\u003e Importance of normalising data in neural networks. \u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://www.youtube.com/watch?v=aircAruvnKk\u0026amp;list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi\u0026amp;index=1\"\u003e[TUTORIAL]\u003c/a\u003e\u003c/strong\u003e Introductory videos for neural networks. Mainly talked about MLP.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e[\u003ca href=\"https://www.youtube.com/@firstprinciplesofcomputerv3258\"\u003eCOURSE\u003c/a\u003e]\u003c/strong\u003e University of Columbia\u0026rsquo;s legendary \u003cem\u003eComputer Vision\u003c/em\u003e course.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e[\u003ca href=\"https://distill.pub/2017/feature-visualization/\"\u003eARTICLE\u003c/a\u003e]\u003c/strong\u003e Feature visualization and how convolutional neural network learns\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e[\u003ca href=\"https://convnetplayground.fastforwardlabs.com/#/models\"\u003eSITE\u003c/a\u003e]\u003c/strong\u003e A pre-trained CNN playground. You can use different pre-trained CNN as feature extractors. Then use extracted embeddings to perform Sementic Search - find another similar image within a dataset. There are many adjustable parameters, including datasets, pre-trained CNN, which layer you want to use, and distance metrics. Pretty fun to play around.\u003c/p\u003e\n\u003cbr\u003e\r\n\u003ch2 id=\"computer-networks\"\u003eComputer Networks\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://www.youtube.com/watch?v=ZMcmspNpkOw\u0026amp;list=PLMLm7-g0V0kdRIhd-qOtDSfG1tNAaQCBz\u0026amp;index=1\u0026amp;t=10s\"\u003e[TUTORIAL]\u003c/a\u003e\u003c/strong\u003e Computer network tutorials.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/alex/what-happens-when\"\u003e[ARTICLE]\u003c/a\u003e\u003c/strong\u003e What happens when you access a website? Explain all OSI layers\u0026rsquo; behaviour from the physical layer to the application layer.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://www2.tkn.tu-berlin.de/teaching/rn/animations/gbn_sr/\"\u003e[SITE]\u003c/a\u003e\u003c/strong\u003e Visualise and let you play with TCP\u0026rsquo;s retransmission. Helpful to the exam.\u003c/p\u003e\n\u003cbr\u003e\r\n\u003ch2 id=\"artifical-intelligence-the-subject\"\u003eArtifical Intelligence (The subject)\u003c/h2\u003e\n\u003cp\u003eThe Artificial Intelligence University subject. E.g. search algorithms, game agent, CSP, Bayesian Net, Reinforcement Learning\u0026hellip;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://www.youtube.com/watch?v=UXW2yZndl7U\u0026amp;list=PL2bg-mBy9Lqi7Q14cOqOK7zVvR6Jfk4nA\u0026amp;index=4\"\u003e[TUTORIAL]\u003c/a\u003e\u003c/strong\u003e Step-by-step demo for search algorithms, MCTS and constrain-satisfication. This professor is truly a legend. Helped me so much for the exam.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://raphsilva.github.io/utilities/minimax_simulator/#\"\u003e[SITE]\u003c/a\u003e\u003c/strong\u003e Minimax and alpha-beta pruning simulator. For the exam purpose, randomly make some trees by yourself and perform the pruning and backpropagations to practice.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://inst.eecs.berkeley.edu/~cs188/sp23/\"\u003e[COURSE]\u003c/a\u003e\u003c/strong\u003e Berkeley\u0026rsquo;s \u003cem\u003eArtificial Intelligence\u003c/em\u003e course.\u003c/p\u003e\n\u003cbr\u003e\r\n\u003ch2 id=\"distributed-systems\"\u003eDistributed Systems\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://hackernoon.com/connecting-the-dots-flp-bft-and-consensus-algorithms-m9r62bs1\"\u003e[Article]\u003c/a\u003e\u003c/strong\u003e \u003cem\u003eConnecting the Dots: FLP, BFT \u0026amp; Consensus Algorithms\u003c/em\u003e. It discusses the connections and interleavings of failure models (crash/omission/byzantine) and interaction models (sync/async) in distributed consensus problem.\u003c/p\u003e\n\u003cp\u003eIf you also feel sad taking Unimelb\u0026rsquo;s trash course COMP90015 (Distributed Systems) that 40% of the contents overlap with COMP30023, 60% of the contents are too high-level and old AF, then:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://pdos.csail.mit.edu/6.824/schedule.html\"\u003e[COURSE]\u003c/a\u003e\u003c/strong\u003e MIT\u0026rsquo;s \u003cem\u003eDistributed Systems\u003c/em\u003e. Most reputable Distributed System course.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://www.youtube.com/watch?v=UEAMfLPZZhE\u0026amp;list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026amp;index=1\"\u003e[COURSE]\u003c/a\u003e\u003c/strong\u003e University of Cambridge\u0026rsquo;s \u003cem\u003eDistributed System\u003c/em\u003e. It is easier than MIT\u0026rsquo;s and has some overlapping with Unimelb\u0026rsquo;s COMP90020 \u003cem\u003eDistributed Algorithms\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://courses.engr.illinois.edu/cs425/fa2009/\"\u003e[Course2009]\u003c/a\u003e\u003ca href=\"https://courses.grainger.illinois.edu/ece428/sp2024/\"\u003e[Course2024]\u003c/a\u003e\u003c/strong\u003e (replace the URL with different years so that you can check past semesters) University of Illinois\u0026rsquo;s \u003cem\u003eDistributed Systems\u003c/em\u003e. This one is very similar to COMP90020. The most useful content from this course is the publicly available exereices. Good for exam preparations. Sadly this subject\u0026rsquo;s lecture recording is not publicly available.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"http://elaineshi.com/docs/blockchain-book.pdf\"\u003e[BOOK]\u003c/a\u003e\u003c/strong\u003e \u003cem\u003eFoundations of Distributed Consensus and Blockchains\u003c/em\u003e by Elaine Shi. It only focuses on consensus related problems.\n\u003cbr\u003e\u003c/p\u003e\n\u003ch2 id=\"cryptography\"\u003eCryptography\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://www.youtube.com/watch?v=z9bTzjy4SCg\"\u003e[TUTORIAL]\u003c/a\u003e\u003c/strong\u003e Tutorial for finite field (Galois field). This channel also has many good math tutorials. This video is especially helpful if you are a Unimelb student taking COMP90043 (Crytography and Security) - The subject content on the finite field part is so ill-designed. The lecture slides are stackings of formulas with no explanation. Plus if your lecturer is Udaya then\u0026hellip;good luck\u0026hellip; (Other than these, the subject is pretty good)\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://www.youtube.com/playlist?list=PLBlnK6fEyqRgJU3EsOYDTW7m6SUmW6kII\"\u003e[COURSE]\u003c/a\u003e\u003c/strong\u003e \u003cem\u003eCrytography and Network Security\u003c/em\u003e full course. Might be helpful to your COMP90043 study. But I personally find the suggested textbook (\u003cem\u003eCrytography and Network Security - William Stallings\u003c/em\u003e) more useful for this subject. The subject syllabus follows the textbook exactly so if you don\u0026rsquo;t understand anything just refer to the textbook.\u003c/p\u003e\n\u003cbr\u003e\r\n\u003ch2 id=\"cs-self-learning--roadmap\"\u003eCS Self-Learning  RoadMap\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://csdiy.wiki/en/\"\u003e[RoadMap]\u003c/a\u003e\u003c/strong\u003e CS self-learning roadmap.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://roadmap.sh/\"\u003e[RoadMap]\u003c/a\u003e\u003c/strong\u003e Developer self-learning roadmap. E.g. backend developer, frontend developer, game developer\u0026hellip;\u003c/p\u003e\n\u003cbr\u003e\r\n\u003ch2 id=\"fun-stuff\"\u003eFun Stuff\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://www.youtube.com/watch?v=_3loq22TxSc\"\u003e[Video]\u003c/a\u003e \u003ca href=\"https://www.youtube.com/watch?v=sdkxWqsk17c\u0026amp;t=0s\"\u003e[Video]\u003c/a\u003e\u003c/strong\u003e Programming with Microsoft PowerPoint. Building a Turning Machine with it. 😧\n\u003cbr\u003e\u003c/p\u003e\n\u003cbr\u003e\r\n","description":null,"image":"/post-default.jpg","permalink":"/blogs/resource-sharing/","title":"Good Tech Tutorials/Blogs/Sites"}]